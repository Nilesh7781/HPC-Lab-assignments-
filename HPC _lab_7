Write a Parallel C program where the iterations of a loop should be scheduled statically across the team of threads. A thread should perform CHUNK iterations at a time before being scheduled for the next CHUNK of work. 
 
#include <stdio.h>
#include <omp.h>

int main() {
    int i;
    int N = 16;           // total iterations
    int CHUNK = 4;        // number of iterations per chunk

    printf("Static scheduling with chunk size = %d\n", CHUNK);

    // Parallel for loop with static scheduling
    #pragma omp parallel for schedule(static, CHUNK) num_threads(4)
    for (i = 0; i < N; i++) {
        int tid = omp_get_thread_num();
        printf("Thread %d is processing iteration %d\n", tid, i);
    }

    return 0;
}

Sample Output :
Static scheduling with chunk size = 4
Thread 0 is processing iteration 0
Thread 0 is processing iteration 1
Thread 0 is processing iteration 2
Thread 0 is processing iteration 3
Thread 1 is processing iteration 4
Thread 1 is processing iteration 5
Thread 1 is processing iteration 6
Thread 1 is processing iteration 7
Thread 2 is processing iteration 8
Thread 2 is processing iteration 9
Thread 2 is processing iteration 10
Thread 2 is processing iteration 11
Thread 3 is processing iteration 12
Thread 3 is processing iteration 13
Thread 3 is processing iteration 14
Thread 3 is processing iteration 15
